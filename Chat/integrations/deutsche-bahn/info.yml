id: deutsche-bahn-integration
name: Deutsche Bahn # Der  Name der Integration er wird auch dann im Integrationenmenü angezeigt
description: Züge & Fahrpläne in Deutschland # Eine kurze Beschreibung der Integration nur für hier wichtig steht nirgends wo
author: "arlomu" # Die Authoren stehen auch nirgendswo
tags: [transport, germany, trains, public-transport] # Die Tags helfen die Integration zu kategorisieren aber sind auch in keinem GUI
license: MIT # Auch nicht im GUI
repository: https://github.com/arlomu/Bahn-API-Integration # Auch nicht im GUI
version: 1.0.0 # Auch nicht im GUI
icon: icon.png # Das Icon wird im Integrationenmenü angezeigt vor dem Name klein

systemprompt: |
  Du bist ein Deutsche Bahn Assistent. Antworte **nur** in reinem JSON, **ohne Markdown, Codeblöcke oder zusätzliche Erklärungen**.
  Beispielausgabe:
  {
    "from": "Berlin%20Hbf",
    "to": "Hamburg%20Hbf",
    "departure": "2024-07-02T15:30:00"
  }


api-call1-go-to-ai: false # Ob die Ausgabe der API an die AI zurückgegeben wird oder nicht
api-call1: curl "https://v6.db.transport.rest/locations?query=%ai_from%&results=1" # Die API url die aufgreufen wird das mit %ai_from% wird durch den wert denn die KI zurückgibt ersetzt
api-call1-output: | # Die Ausgabe der API die an die AI zurückgegeben wird
  [
      {
          "id": "1",
          "name": "2",
          "type": "3",
          "location": {
              "type": "location",
              "id": "4",
              "latitude": 5,
              "longitude": 6
          },
          "products": {
              "nationalExpress": 7,
              "national": 8,
              "regionalExpress": 9,
              "regional": 10,
              "suburban": 11,
              "bus": 12,
              "ferry": 13,
              "subway": 14,
              "tram": 15,
              "taxi": 16
          },
          "weight": 17,
          "ril100Ids": [
              "18",
              "19",
              "20",
              "21"
          ],
          "ifoptId": "22",
          "priceCategory": 23,
          "transitAuthority": "24",
          "stadaId": "25"
      }
  ]

api-call2-go-to-ai: false
api-call2: curl "https://v6.db.transport.rest/locations?query=%ai_to%&results=1" # Die API url die aufgreufen wird das mit %ai_to% wird durch den wert denn die KI zurückgibt ersetzt
api-call2-output: |
  [
      {
          "id": "1",
          "name": "2",
          "type": "3",
          "location": {
              "type": "location",
              "id": "4",
              "latitude": 5,
              "longitude": 6
          },
          "products": {
              "nationalExpress": 7,
              "national": 8,
              "regionalExpress": 9,
              "regional": 10,
              "suburban": 11,
              "bus": 12,
              "ferry": 13,
              "subway": 14,
              "tram": 15,
              "taxi": 16
          },
          "weight": 17,
          "ril100Ids": [
              "18",
              "19",
              "20",
              "21"
          ],
          "ifoptId": "22",
          "priceCategory": 23,
          "transitAuthority": "24",
          "stadaId": "25"
      }
  ]

api-call3-go-to-ai: true # Ob die Ausgabe der API an die AI zurückgegeben wird oder nicht
api-call3: |
  curl -s "https://v6.db.transport.rest/stops/8011160/departures?duration=60" \
  | jq '[.departures[0:3] | .[] | {line: .line.name, when: .when, delay: .delay, platform: .platform, direction: .direction}]'
  # jetzt werden bei uns die verbindungen abgefragt
api-call3-output: |
  [
    {
      "line": "ICE 804",
      "when": "2025-09-21T11:15:00+02:00",
      "delay": 2280,
      "platform": "8",
      "direction": "Hamburg-Altona"
    },
    {
      "line": "S 3",
      "when": "2025-09-21T11:11:00+02:00",
      "delay": 1320,
      "platform": "16",
      "direction": "Berlin-Spandau (S)"
    },
    {
      "line": "ICE 650",
      "when": "2025-09-21T11:12:00+02:00",
      "delay": 1200,
      "platform": "13",
      "direction": "Köln Hbf"
    }
  ]

# Max 5 API calls!